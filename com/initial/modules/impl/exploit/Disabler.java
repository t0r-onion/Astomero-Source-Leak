package com.initial.modules.impl.exploit;

import com.initial.settings.impl.*;
import net.minecraft.network.*;
import java.util.*;
import com.initial.utils.player.*;
import com.initial.modules.*;
import com.initial.settings.*;
import com.initial.utils.networking.*;
import com.initial.events.*;
import net.minecraft.network.play.server.*;
import com.initial.utils.movement.*;
import com.initial.events.impl.*;
import net.minecraft.network.play.client.*;

public class Disabler extends Module
{
    public ModeSet modes;
    public static ArrayList<Packet> packets;
    private LinkedList<Packet> packetQueue;
    private List<Packet> packetList;
    ArrayList<Packet> transactions;
    private Timerr timer;
    int currentTransaction;
    
    public Disabler() {
        super("Disabler", 0, Category.EXPLOIT);
        this.modes = new ModeSet("Mode", "Dynamic PvP", new String[] { "Dynamic PvP", "Verus Combat", "Latest Verus", "Old Verus", "Verus" });
        this.packetQueue = new LinkedList<Packet>();
        this.packetList = new ArrayList<Packet>();
        this.transactions = new ArrayList<Packet>();
        this.timer = new Timerr();
        this.currentTransaction = 0;
        this.addSettings(this.modes);
    }
    
    @Override
    public void onEnable() {
        super.onEnable();
        this.packetQueue.clear();
        this.timer.reset();
    }
    
    @Override
    public void onDisable() {
        super.onDisable();
        this.mc.timer.timerSpeed = 1.0f;
        this.currentTransaction = 0;
        this.transactions.clear();
        this.packetQueue.clear();
        this.packetList.clear();
        Disabler.packets.clear();
    }
    
    @EventTarget
    @Override
    public void onEvent(final EventNigger e) {
        if (e instanceof UpdateEvent && e.isPre()) {
            this.setDisplayName("Disabler §7" + this.modes.getMode());
            final String mode = this.modes.getMode();
            switch (mode) {
                case "Latest Verus": {
                    if (this.timer.delay(490.0f)) {
                        if (!this.packetQueue.isEmpty()) {
                            PacketUtil.sendPacketSilent(this.packetQueue.poll());
                        }
                        this.timer.reset();
                        break;
                    }
                    break;
                }
                case "Old Verus": {
                    if (this.mc.thePlayer.ticksExisted % 120 == 0 && this.transactions.size() > this.currentTransaction) {
                        this.mc.thePlayer.sendQueue.addToSilentQueue(this.transactions.get(this.currentTransaction++));
                    }
                    if (this.mc.thePlayer.ticksExisted % 40 == 0) {
                        this.mc.thePlayer.sendQueue.addToSilentQueue(new C03PacketPlayer.C06PacketPlayerPosLook(this.mc.thePlayer.posX, this.mc.thePlayer.posY - 11.0, this.mc.thePlayer.posZ, this.mc.thePlayer.rotationYaw, this.mc.thePlayer.rotationPitch, true));
                    }
                    if (this.mc.thePlayer.ticksExisted % 300 == 0) {
                        this.packetQueue.clear();
                        this.packetList.clear();
                        break;
                    }
                    break;
                }
                case "Verus Combat": {
                    if (this.mc.thePlayer.ticksExisted % 180 == 0) {
                        while (this.packetQueue.size() > 22) {
                            PacketUtil.sendPacketSilent(this.packetQueue.get(0));
                            this.packetQueue.remove(0);
                        }
                        break;
                    }
                    break;
                }
                case "Dynamic PvP": {
                    if (this.mc.thePlayer == null || this.mc.thePlayer.ticksExisted == 0) {
                        this.packetQueue.clear();
                        return;
                    }
                    if (this.mc.thePlayer.ticksExisted % 45 == 0) {
                        PacketUtil.sendPacketSilent(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX, this.mc.thePlayer.posY, this.mc.thePlayer.posZ, true));
                        PacketUtil.sendPacketSilent(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX, this.mc.thePlayer.posY - 11.725, this.mc.thePlayer.posZ, false));
                        PacketUtil.sendPacketSilent(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX, this.mc.thePlayer.posY, this.mc.thePlayer.posZ, true));
                    }
                    if (this.mc.thePlayer.ticksExisted % 180 == 0) {
                        while (this.packetQueue.size() > 22) {
                            PacketUtil.sendPacketSilent(this.packetQueue.poll());
                        }
                        break;
                    }
                    break;
                }
                case "Verus": {
                    if (this.mc.thePlayer == null || this.mc.thePlayer.ticksExisted == 0) {
                        this.packetQueue.clear();
                        return;
                    }
                    if (this.mc.thePlayer.ticksExisted % 45 == 0) {
                        PacketUtil.sendPacketSilent(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX, this.mc.thePlayer.posY, this.mc.thePlayer.posZ, true));
                        PacketUtil.sendPacketSilent(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX, this.mc.thePlayer.posY - 999.725, this.mc.thePlayer.posZ, false));
                        PacketUtil.sendPacketSilent(new C03PacketPlayer.C04PacketPlayerPosition(this.mc.thePlayer.posX, this.mc.thePlayer.posY, this.mc.thePlayer.posZ, true));
                    }
                    if (this.mc.thePlayer.ticksExisted % 180 == 0) {
                        while (this.packetQueue.size() > 22) {
                            PacketUtil.sendPacketSilent(this.packetQueue.poll());
                        }
                        break;
                    }
                    break;
                }
            }
        }
    }
    
    @EventTarget
    public void onReceive(final EventReceivePacket e) {
        final String mode = this.modes.getMode();
        switch (mode) {
            case "Dynamic PvP":
            case "Verus": {
                if (!(e.getPacket() instanceof S08PacketPlayerPosLook)) {
                    break;
                }
                final S08PacketPlayerPosLook packet = (S08PacketPlayerPosLook)e.getPacket();
                final double x = packet.getX() - this.mc.thePlayer.posX;
                final double y = packet.getY() - this.mc.thePlayer.posY;
                final double z = packet.getZ() - this.mc.thePlayer.posZ;
                final double diff = Math.sqrt(x * x + y * y + z * z);
                if (diff <= 10.0 && this.mc.thePlayer.ticksExisted > 25 && !MovementUtils.isOverVoid()) {
                    PacketUtil.sendPacketSilent(new C03PacketPlayer.C06PacketPlayerPosLook(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), true));
                    e.setCancelled(true);
                    break;
                }
                break;
            }
        }
    }
    
    @EventTarget
    public void onSend(final EventSendPacket e) {
        final String mode = this.modes.getMode();
        switch (mode) {
            case "Dynamic PvP": {
                if (e.getPacket() instanceof C03PacketPlayer && this.mc.thePlayer.ticksExisted > 15) {
                    e.setCancelled(this.mc.thePlayer.ticksExisted % 3 == 0);
                }
                if (e.getPacket() instanceof C00PacketKeepAlive) {
                    e.setCancelled(true);
                    this.packetQueue.add(e.getPacket());
                }
                if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    this.packetQueue.add(e.getPacket());
                    e.setCancelled(true);
                }
                if (e.getPacket() instanceof C0BPacketEntityAction) {
                    e.setCancelled(true);
                    break;
                }
                break;
            }
            case "Verus": {
                if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    for (int i = 0; i < 4; ++i) {
                        this.packetQueue.add(e.getPacket());
                    }
                    e.setCancelled(true);
                }
                if (e.getPacket() instanceof C03PacketPlayer && this.mc.thePlayer.ticksExisted > 15) {
                    e.setCancelled(this.mc.thePlayer.ticksExisted % 3 == 0);
                    break;
                }
                break;
            }
            case "Latest Verus": {
                if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    final C0FPacketConfirmTransaction c0fPacketConfirmTransaction = (C0FPacketConfirmTransaction)e.getPacket();
                    this.packetQueue.add(c0fPacketConfirmTransaction);
                    e.setCancelled(true);
                }
                if (e.getPacket() instanceof C03PacketPlayer) {
                    final C03PacketPlayer c03 = (C03PacketPlayer)e.getPacket();
                    if (this.mc.thePlayer.ticksExisted % 40 == 0) {
                        c03.y = -0.911;
                        c03.onGround = false;
                        c03.moving = false;
                    }
                }
                if (this.mc.thePlayer != null && this.mc.thePlayer.ticksExisted <= 7) {
                    this.timer.reset();
                    this.packetQueue.clear();
                    break;
                }
                break;
            }
            case "Old Verus": {
                if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    Disabler.packets.add(e.getPacket());
                    e.setCancelled(true);
                }
                if (e.getPacket() instanceof C00PacketKeepAlive) {
                    this.mc.thePlayer.sendQueue.addToSilentQueue(new C00PacketKeepAlive(((C00PacketKeepAlive)e.getPacket()).key - 1));
                    e.setCancelled(true);
                }
                if (e.getPacket() instanceof C03PacketPlayer) {
                    this.mc.thePlayer.sendQueue.addToSilentQueue(new C0CPacketInput());
                    break;
                }
                break;
            }
            case "Verus Combat": {
                if (e.getPacket() instanceof C00PacketKeepAlive) {
                    e.setCancelled(true);
                    this.packetQueue.add(e.getPacket());
                }
                if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                    this.packetQueue.add(e.getPacket());
                    e.setCancelled(true);
                }
                if (e.getPacket() instanceof C0BPacketEntityAction) {
                    e.setCancelled(true);
                    break;
                }
                break;
            }
        }
    }
    
    static {
        Disabler.packets = new ArrayList<Packet>();
    }
}
